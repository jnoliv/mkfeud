#!/usr/bin/env bash

# mkfeud is a bash utility to create fully encrypted
# (boot and root partitions) bootable Ubuntu USB sticks.
#
# Copyright (C) 2023 Jo√£o Nuno Oliveira <joaonunoao@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Credits:
# * tj on launchpad for this great guide:
#   https://help.ubuntu.com/community/Full_Disk_Encryption_Howto_2019
# * All the ArchWiki contributors to this great guide:
#   https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system#Encrypted_boot_partition_(GRUB)

# This script creates the following partition structure on the device given by the first argument:
#
# +-------------+--------------+-----------------------+----------------------+----------------------+--------------+
# | GRUB        | EFI-SP       | BOOT                  | Logical volume 1     | Logical volume 2     | USB Data     |
# |             |              |                       |                      |                      |              |
# | 1 MiB       | 512 MiB      | 1.6 GiB               | 512 GiB              | 32 GiB               | ~            |
# |             |              |                       |                      |                      |              |
# | grub2       | fat32        | ext4                  | lvm2 pv (ext4)       | [SWAP]               | ntfs         |
# | core.img    | /boot/efi    | /boot                 | /                    |                      |              |
# |             |              |                       |                      |                      |              |
# |             |              |                       | /dev/vgubuntu/root   | /dev/vgubuntu/swap_1 |              |
# | /dev/sda1   | /dev/sda2    | /dev/sda3             |----------------------+----------------------+ /dev/sda5    |
# | unencrypted | unencrypted  | encrypted using LUKS1 | /dev/sda4 encrypted using LVM on LUKS2      | unencrypted  |
# +-------------+--------------+-----------------------+---------------------------------------------+--------------+

set -euo pipefail

declare -r VERSION='0.3'

# Modify these values to change mkfeud's behaviour.
declare -r ROOT_SIZE=512
declare -r SWAP_SIZE=32
declare -r DATA_PART="USB Data"

declare -r VERBOSE=true

# GPT partition type GUIDs.
declare -r GRUB="21686148-6449-6E6F-744E-656564454649"
declare -r ESP="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
declare -r LUKS="CA7D7CCB-63ED-4C53-861C-1742536059CC"
declare -r DATA="EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"

main () {
    local -r dev="$1"

    local -r devp="$( get_partition_prefix $dev )"
    local -r devm="$( get_partition_prefix ${dev##*/} )"

    # 1. Pre-installation steps
    # 1.1. Prepare partitions
    info "Setting up partitions..."
    
    local -r size4=$(( ROOT_SIZE + SWAP_SIZE ))

    sgdisk --zap-all "$dev" > /dev/null

    sgdisk --new=1:0:+1M        --change-name=1:GRUB         --typecode=1:"$GRUB" "$dev" > /dev/null
    sgdisk --new=2:0:+512M      --change-name=2:EFI-SP       --typecode=2:"$ESP"  "$dev" > /dev/null
    sgdisk --new=3:0:+1711M     --change-name=3:BOOT         --typecode=3:"$LUKS" "$dev" > /dev/null
    sgdisk --new=4:0:+"$size4"G --change-name=4:rootfs       --typecode=4:"$LUKS" "$dev" > /dev/null
    sgdisk --new=5:0:0          --change-name=5:"$DATA_PART" --typecode=5:"$DATA" "$dev" > /dev/null

    info "Partitions setup:\n$( sgdisk --print "$dev" )\n"

    # 1.2. Setup encrypted partitions
    info "Setting up encryption..."
    
    cryptsetup luksFormat --type=luks1 "${devp}3"
    info "Partition ${devp}3 encryption setup."

    cryptsetup luksFormat "${devp}4"
    info "Partition ${devp}4 encryption setup."

    # 1.3. Unlock encrypted partitions
    info "Unlocking encrypted partitions (${devp}3 & ${devp}4)..."
    
    local -r luks_root="${devm}4_crypt"

    cryptsetup open "${devp}3" LUKS_BOOT
    info "Partition ${devp}3 unlocked."
    
    cryptsetup open "${devp}4" "$luks_root"
    info "Partition ${devp}4 unlocked."

    # 1.4. Format filesystems
    info "Formatting filesystems..."
    
    mkfs.fat -F 32 -S "$(blockdev --getpbsz "$dev")" "${devp}2"  > /dev/null
    mkntfs --fast --quiet --label "$DATA_PART" -p 0 -H 0 -S 0 "${devp}5"

    mkfs.ext4 -q -L boot /dev/mapper/LUKS_BOOT

    info "Filesystems formatted."

    # 1.5. Setup LVM
    info "Setting up LVM..."
    
    pvcreate "/dev/mapper/$luks_root"
    vgcreate vgubuntu "/dev/mapper/$luks_root"
    lvcreate --name swap_1 --size "$SWAP_SIZE"G vgubuntu
    lvcreate --name root   --extents 100%FREE   vgubuntu

    info "LVM setup."

    # 2. Installation steps
    waitforuser "Start installation and continue after completing all forms."

    # 2.1. Wait until installer creates grub configuration
    while [ ! -d /target/etc/default/grub.d ]; do
        sleep 1
    done
    
    # 2.2. Enable grub support for encrypted partitions
    echo "GRUB_ENABLE_CRYPTODISK=y" > /target/etc/default/grub.d/local.cfg

    # 3. Post-installation steps
    waitforuser "Let installation finish and continue after selecting \"Continue Testing\"."

    # 3.1. Create chroot jail on the filesystem of newly installed OS
    mount /dev/mapper/vgubuntu-root /target

    for n in proc sys dev etc/resolv.conf; do
        mount --rbind "/$n" "/target/$n"
    done 

    chroot /target /bin/bash -c "
        mount -a
        mkdir -p /etc/luks

        # 3.2. Configure initramfs
        echo 'KEYFILE_PATTERN=/etc/luks/*.keyfile' >> /etc/cryptsetup-initramfs/conf-hook 
        echo 'UMASK=0077'                          >> /etc/initramfs-tools/initramfs.conf

        # 3.3. Create randomised key-file of 4096 bits
        dd if=/dev/urandom of=/etc/luks/boot_os.keyfile bs=512 count=1

        # 3.4. Secure key-file
        chmod u=rx,go-rwx /etc/luks
        chmod u=r,go-rwx /etc/luks/boot_os.keyfile

        # 3.5. Add key-file to LUKS volumes
        echo -e '\e[0;32m[INFO] Adding key-file to ${devp}3 partition...\e[0m'
        cryptsetup luksAddKey ${devp}3 /etc/luks/boot_os.keyfile

        echo -e '\e[0;32m[INFO] Adding key-file to ${devp}4 partition...\e[0m'
        cryptsetup luksAddKey ${devp}4 /etc/luks/boot_os.keyfile

        # 3.6. Add keys to the crypttab
        echo 'LUKS_BOOT      UUID=$(blkid -s UUID -o value ${devp}3) /etc/luks/boot_os.keyfile luks,discard
              ${devm}4_crypt UUID=$(blkid -s UUID -o value ${devp}4) /etc/luks/boot_os.keyfile luks,discard' \
            >> /etc/crypttab

        # 3.7. Update initramfs files
        update-initramfs -u -k all
    "
}

waitforuser () {
    echo -e "\e[0;33m$1"
    read -rsn1 -p "Press any key to continue..."
    echo -e "\e[0m"
}

get_partition_prefix () {
    if [[ $1 =~ [0-9]$ ]]; then
        echo "$1"p
    else
        echo "$1"
    fi
}

info () {
    if $VERBOSE; then
        echo -e "\e[0;32m[INFO] $*\e[0m" > /dev/tty
    fi
}

main "$@"
