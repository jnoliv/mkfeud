#!/usr/bin/env bash

# mkfeud is a bash utility to create fully encrypted
# (boot and root partitions) bootable Ubuntu USB sticks.
#
# Copyright (C) 2023 Jo√£o Nuno Oliveira <joaonunoao@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Credits:
# * tj on launchpad for this great guide:
#   https://help.ubuntu.com/community/Full_Disk_Encryption_Howto_2019
# * All the ArchWiki contributors to this great guide:
#   https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system#Encrypted_boot_partition_(GRUB)
# * Nick Jeppson for this great post on how to chroot into encrypted drive:
#   https://techblog.jeppson.org/2020/03/chroot-into-encrypted-drive/

# This script creates the following partition structure on the device given by the first argument:
#
# +--------------+-----------------------+----------------------+----------------------+--------------+
# | EFI-SP       | BOOT                  | Logical volume 1     | Logical volume 2     | USB Data     |
# |              |                       |                      |                      |              |
# | 512 MiB      | 1.6 GiB               | 512 GiB              | 32 GiB               | ~            |
# |              |                       |                      |                      |              |
# | fat32        | ext4                  | lvm2 pv (ext4)       | [SWAP]               | ntfs         |
# | /boot/efi    | /boot                 | /                    |                      |              |
# |              |                       |                      |                      |              |
# |              |                       | /dev/vgubuntu/root   | /dev/vgubuntu/swap_1 |              |
# | /dev/sda1    | /dev/sda2             |----------------------+----------------------+ /dev/sda4    |
# | unencrypted  | encrypted using LUKS1 | /dev/sda3 encrypted using LVM on LUKS2      | unencrypted  |
# +--------------+-----------------------+---------------------------------------------+--------------+

# TODO:
# * Rework verbose logs
# * Validate system booted in uefi mode with secure boot enabled (or figure out how to always target that config)
#   * [ -d /sys/firmware/efi ]
# * Validate given device is not in use (mounted or open)
# * Validate given device has enough capacity for all the partitions
# * Clean up at the end
#   * Unmount chroot directories
#   * Deactivate LVM volumes
#   * Close LUKS encrypted partitions
# * Track what's been created to clean up if there's an error?
# * Automate ubuntu install (debootstrap? ubiquity --automatic?)
# * Require usb hardware key in addition to passphrase to open enrypted boot partition
# * Configure grub resolution (for easier reading in 4k screens)
# * Install grub with the removable flag
# * Install grub with support for SecureBoot regardless of how current system was booted

set -euo pipefail

declare -r VERSION='0.5'

# Exit codes. The values greater than 63, as well as 0, are
# identical to the definitions in '/usr/include/sysexits.h'.
declare -r EX_OK=0          # successful termination
declare -r EX_MOUNTED=1     # device has mounted partitions
declare -r EX_USAGE=64      # command line usage error

# GPT partition type GUIDs.
declare -r GRUB="21686148-6449-6E6F-744E-656564454649"
declare -r ESP="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
declare -r LUKS="CA7D7CCB-63ED-4C53-861C-1742536059CC"
declare -r DATA="EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"

usage() {
  echo \
"
USAGE:
  $0  [OPTION]... DEVICE

  Make DEVICE bootable with encrypted boot and root partitions.

OPTIONS:
  -r, --root-size=SIZE              specify the root partition size in GiB
  -s, --swap-size=SIZE              specify the swap partition size in GiB
  -d, --data-partition-name=NAME    specify the name to set for the data partition
  
  -h, --help                        display this help
      --version                     display version
"
}

main () {
    parse_args "$@"
    validate

    declare -gr PASS_BOOT=$( read_passphrase "${DEVP}2 (boot)" )
    declare -gr PASS_ROOT=$( read_passphrase "${DEVP}3 (root)" )

    setup_partitions
    enable_grub_cryptodisk
    configure_encrypted_boot
}

parse_args () {
    # Default values.
    declare -g ROOT_SIZE=512
    declare -g SWAP_SIZE="$( get_ram_size )"
    declare -g DATA_PART="USB Data"
    declare -g VERBOSE=false

    # Optional arguments.
    args=$( getopt --name "$0" \
                --options=+"r:s:d:vh" \
                --longoptions="root-size:,swap-size:,data-partition-name:,verbose,help,version" \
                -- "$@"
    )

    if [ $? -ne 0 ]; then
        usage "$EX_USAGE"
    fi

    eval set -- "$args"

    # Process the options
    while true; do
        case "$1" in
            -r|--root-size)
                ROOT_SIZE="$2"
                shift 2;;
            
            -s|--swap-size)
                SWAP_SIZE="$2"
                shift 2;;

            -d|--data-partition-name)
                DATA_PART="$2"
                shift 2;;

            -v|--verbose)
                VERBOSE=true
                shift;;

            -h|--help)
                usage
                exit;;
            
            --version)
                echo "mkfeud v$VERSION"
                exit "$EX_OK";;

            --)
                shift
                break;;

            *)
                echo "Invalid option: $1"
                usage
                exit "$EX_USAGE";;
        esac
    done

    # Positional arguments.
    if [ -z "${1:-}" ] || ! [ -b "$1" ]; then
        echo "First positional argument is missing or is not a block device!"
        usage "$EX_USAGE"
        exit
    fi

    declare -gr DEV="$1"

    declare -gr DEVP="$( get_partition_prefix "$DEV" )"
    declare -gr DEVM="$( get_partition_prefix "${DEV##*/}" )"
}

validate () {
    local -r mounted=$(df | grep "$DEV" | cut -d' ' -f1)

    if [ -n "$mounted" ]; then
        echo "Device has mounted partitions!"
        exit "$EX_MOUNTED"
    fi

    if [ "$( mokutil --sb-state )" -ne "SecureBoot enabled" ]; then
        echo_yellow "Current system not booted using SecureBoot. You may encounter issues booting from the USB with SecureBoot enabled!"
    fi
}

setup_partitions () {
    # 1. Pre-installation steps
    # 1.1. Prepare partitions
    info "Setting up partitions..."
    
    local -r size4=$(( ROOT_SIZE + SWAP_SIZE ))

    sgdisk --zap-all "$DEV" > /dev/null

    sgdisk --new=1:0:+512M      --change-name=1:EFI-SP       --typecode=1:"$ESP"  "$DEV" > /dev/null
    sgdisk --new=2:0:+1711M     --change-name=2:BOOT         --typecode=2:"$LUKS" "$DEV" > /dev/null
    sgdisk --new=3:0:+"$size4"G --change-name=3:rootfs       --typecode=3:"$LUKS" "$DEV" > /dev/null
    sgdisk --new=4:0:0          --change-name=4:"$DATA_PART" --typecode=4:"$DATA" "$DEV" > /dev/null

    info "Partitions setup:\n$( sgdisk --print "$DEV" )\n"

    # 1.2. Setup encrypted partitions
    info "Setting up encryption..."
    
    echo -n "$PASS_BOOT" | cryptsetup luksFormat -q --type=luks1 "${DEVP}2"
    info "Partition ${DEVP}2 encryption setup."

    echo -n "$PASS_ROOT" | cryptsetup luksFormat -q "${DEVP}3"
    info "Partition ${DEVP}3 encryption setup."

    # 1.3. Unlock encrypted partitions
    info "Unlocking encrypted partitions (${DEVP}2 & ${DEVP}3)..."
    
    local -r luks_root="${DEVM}3_crypt"

    echo -n "$PASS_BOOT" | cryptsetup open "${DEVP}2" LUKS_BOOT
    info "Partition ${DEVP}2 unlocked."
    
    echo -n "$PASS_ROOT" | cryptsetup open "${DEVP}3" "$luks_root"
    info "Partition ${DEVP}3 unlocked."

    # 1.4. Format filesystems
    info "Formatting filesystems..."
    
    mkfs.fat -F 32 -S "$(blockdev --getpbsz "$DEV")" "${DEVP}1"  > /dev/null
    mkntfs --fast --quiet --label "$DATA_PART" -p 0 -H 0 -S 0 "${DEVP}4"

    mkfs.ext4 -q -L boot /dev/mapper/LUKS_BOOT

    info "Filesystems formatted."

    # 1.5. Setup LVM
    info "Setting up LVM..."
    
    pvcreate "/dev/mapper/$luks_root"
    vgcreate vgubuntu "/dev/mapper/$luks_root"
    lvcreate --name swap_1 --size "$SWAP_SIZE"G vgubuntu
    lvcreate --name root   --extents 100%FREE   vgubuntu

    info "LVM setup."
}

enable_grub_cryptodisk () {
    # 2. Installation steps
    echo_yellow "Complete the manual installation steps..."

    # 2.1. Wait until installer creates grub configuration
    while [ ! -d /target/etc/default/grub.d ]; do
        sleep 1
    done
    
    # 2.2. Enable grub support for encrypted partitions
    echo "GRUB_ENABLE_CRYPTODISK=y" > /target/etc/default/grub.d/local.cfg
}

configure_encrypted_boot () {
    # 3. Post-installation steps
    waitforuser "Let installation finish and continue after selecting \"Continue Testing\"."

    # 3.1. Create chroot jail on the filesystem of newly installed OS
    mount /dev/mapper/vgubuntu-root /target
    mount /dev/mapper/LUKS_BOOT /target/boot

    for n in proc sys dev etc/resolv.conf; do
        mount --rbind "/$n" "/target/$n"
    done 

    chroot /target /bin/bash -c "
        mount -a
        mkdir -p /etc/luks

        # 3.2. Configure initramfs
        echo 'KEYFILE_PATTERN=/etc/luks/*.keyfile' >> /etc/cryptsetup-initramfs/conf-hook 
        echo 'UMASK=0077'                          >> /etc/initramfs-tools/initramfs.conf

        # 3.3. Create randomised key-file of 4096 bits
        dd if=/dev/urandom of=/etc/luks/boot_os.keyfile bs=512 count=1

        # 3.4. Secure key-file
        chmod u=rx,go-rwx /etc/luks
        chmod u=r,go-rwx /etc/luks/boot_os.keyfile

        # 3.5. Add key-file to LUKS volumes
        echo -e '\e[0;32m[INFO] Adding key-file to ${DEVP}2 partition...\e[0m'
        echo -n \"$PASS_BOOT\" | cryptsetup luksAddKey \"${DEVP}2\" /etc/luks/boot_os.keyfile

        echo -e '\e[0;32m[INFO] Adding key-file to ${DEVP}3 partition...\e[0m'
        echo -n \"$PASS_ROOT\" | cryptsetup luksAddKey \"${DEVP}3\" /etc/luks/boot_os.keyfile

        # 3.6. Add keys to the crypttab
        echo 'LUKS_BOOT      UUID=$(blkid -s UUID -o value ${DEVP}2) /etc/luks/boot_os.keyfile luks,discard
              ${DEVM}3_crypt UUID=$(blkid -s UUID -o value ${DEVP}3) /etc/luks/boot_os.keyfile luks,discard' \
            >> /etc/crypttab

        # 3.7. Update initramfs files
        update-initramfs -u -k all
    "
}

# Utilities.
read_passphrase () {
    local pass1 pass2

    while true; do
        read -rs -p "Enter $1 LUKS passphrase:" pass1; echo > /dev/tty
        read -rs -p "Verify passphrase:"        pass2; echo > /dev/tty

        if [ "$pass1" == "$pass2" ]; then
            echo "$pass1"
            return
        fi

        echo_red "Passphrases do not match!"
    done
}

waitforuser () {
    echo -e "\e[0;33m$1"
    read -rsn1 -p "Press any key to continue..."
    echo -e "\e[0m"
}

get_partition_prefix () {
    if [[ $1 =~ [0-9]$ ]]; then
        echo "$1"p
    else
        echo "$1"
    fi
}

get_ram_size() {
  local -r size="$(awk '/MemTotal/ {print $2}' /proc/meminfo)"
  echo "$(( size / (1024 * 1024) ))"
}

# Logging and echoing.
echo_red    () { echo -e "\e[0;31m$*\e[0m" > /dev/tty; }
echo_green  () { echo -e "\e[0;32m$*\e[0m" > /dev/tty; }
echo_yellow () { echo -e "\e[0;33m$*\e[0m" > /dev/tty; }

info () { [ $VERBOSE ] && echo_green "[INFO] $*"; }

#
main "$@"
